<?php

/**
 * @file
 * First Custom Module module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * DocBlock comments/message
 * Implements hook_help().
 * Adding the help page hook for this module utilizing the core HELP module
 * Letting Drupal know that if a user is looking at this module help page then show the below message
 */
function firstmodule_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.firstmodule':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This is our first custom d10 development module!!') . '</p>';
      return $output;

    default:
  }
}

/**
 * DocBlock message
 * Implements hook_form_FORM_ID_alter().
 * Adding the custom submit_handler which needs to applied for the salutation_configuration_form
 */
 function my_module_form_salutation_configuration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Perform alterations.
   $form['#submit'][] = 'firstmodule_salutation_configuration_form_submit';
 }

/**
 * Implements hook_theme().
 *
 * letting the drupal know that we are implementing the theme_hook in 'firstmodule_salutation' template file
 * where we are also declaring the variables we use in the template
 */
function firstmodule_theme($existing, $type, $theme, $path) {
  return [
    'firstmodule_salutation' => [
      'variables' => [
        'salutation' => NULL,
        'target' => NULL,
        'overridden' => FALSE,
      ],
    ],
  ];
 }

  /**
   * Default preprocessor function for the firstmodule_salutation theme hook.
   *
   * Adding the below varibles for the said twig file
   */
  function template_preprocess_firstmodule_salutation(&$variables) {
    $variables['attributes'] = [
      'class' => ['salutation'],
    ];
  }

  /**
   * Implements hook_theme_suggestions_HOOK().
   *
   * Adding the alternate twig file if the overridden is set to TRUE
   */
  function firstmodule_theme_suggestions_firstmodule_salutation($variables) {
    $suggestions = [];

    if ($variables['overridden'] === TRUE) {
      $suggestions[] = 'firstmodule_salutation__overridden';
    }

    return $suggestions;
  }

/**
 * Implements hook_entity_extra_field_info().
 *
 * Adding new 'disclaimer' field to every content type across the site
 */
function firstmodule_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->id()]['display']['disclaimer'] = [
      'label' => t('Disclaimer'),
      'description' => t('A general disclaimer'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra;

  /**
   * Implements hook_ENTITY_TYPE_view().
   */
  function firstmodule_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
    // Checking the condition whether our 'disclaimer' display defined in previous hook is present
    if ($display->getComponent('disclaimer')) {
      $build['disclaimer'] = [
        '#markup' => t('The content provided is for custom general information purposes only for our site.'),
      ];
    }
  }
}
